{"version":3,"sources":["views/Collectibles/components/InfoRow.tsx","views/Collectibles/components/TransferNftModal.tsx","views/Collectibles/components/ClaimNftModal.tsx","views/Collectibles/components/NftCard/Preview.tsx","views/Collectibles/components/NftCard/index.tsx","views/Collectibles/components/NftGrid.tsx","views/Collectibles/components/NftList.tsx","views/Collectibles/index.tsx","hooks/useGetWalletNfts.ts"],"names":["InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","text","TransferNftModal","nft","tokenIds","onSuccess","onDismiss","useState","isLoading","setIsLoading","value","setValue","error","setError","TranslateString","useI18n","account","useWeb3React","pancakeRabbitsContract","usePancakeRabbits","toastSuccess","useToast","handleConfirm","a","Web3","utils","isAddress","methods","transferFrom","send","from","on","console","title","color","mb","name","htmlFor","id","type","placeholder","onChange","evt","inputValue","target","isWarning","disabled","width","variant","onClick","ClaimNftModal","isConfirming","setIsConfirming","toastError","bunnySpecialContract","useBunnySpecialContract","mintNFT","bunnyId","alignItems","justifyContent","bold","Container","borderColor","StyledImage","img","StyledVideo","video","Preview","isOwned","images","previewImageSrc","lg","videoComponent","autoPlay","controls","loop","muted","poster","src","webm","mp4","href","ipfs","rel","previewImage","alt","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","canClaim","isOpen","setIsOpen","profile","useProfile","description","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","handleClick","useModal","onPresentTransferModal","onPresentClaimModal","isActive","outline","mt","p","endIcon","as","style","textAlign","NftGrid","mediaQueries","sm","md","getBunnySpecialContract","NftList","claimableNfts","setClaimableNfts","useGetWalletNfts","nftTokenIds","nfts","refresh","fetchClaimableStatuses","useCallback","walletAddress","makeBatchRequest","map","canClaimSingle","call","claimStatuses","reduce","accum","claimStatus","index","handleSuccess","useEffect","orderBy","StyledHero","textSubtle","Collectibles","Page","size","getPancakeRabbitContract","initialState","lastUpdated","Date","now","reducer","state","action","data","timestamp","useReducer","dispatch","balanceOf","getTokenIdAndBunnyId","tokenOfOwnerByIndex","getBunnyId","tokenURI","tokenId","tokenUri","Number","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","association","fetchNfts"],"mappings":"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","file":"static/js/12.0091ed27.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { useToast } from 'state/hooks'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const pancakeRabbitsContract = usePancakeRabbits()\n  const { toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await pancakeRabbitsContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n            toastSuccess('NFT successfully transferred!')\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { useBunnySpecialContract } from 'hooks/useContract'\nimport { useToast } from 'state/hooks'\nimport { Button, InjectedModalProps, Modal, Text, Flex } from '@pancakeswap-libs/uikit'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\n\ninterface ClaimNftModalProps extends InjectedModalProps {\n  nft: Nft\n  onSuccess: () => void\n}\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n  const bunnySpecialContract = useBunnySpecialContract()\n\n  const handleConfirm = async () => {\n    bunnySpecialContract.methods\n      .mintNFT(nft.bunnyId)\n      .send({ from: account })\n      .on('sending', () => {\n        setIsConfirming(true)\n      })\n      .on('receipt', () => {\n        toastSuccess('Successfully claimed!')\n        onDismiss()\n        onSuccess()\n      })\n      .on('error', (error) => {\n        console.error('Unable to claim NFT', error)\n        toastError('Error', 'Unable to claim NFT, please try again.')\n        setIsConfirming(false)\n      })\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Claim Collectible')} onDismiss={onDismiss}>\n      <ModalContent>\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\n          <Text>{TranslateString(626, 'You will receive')}:</Text>\n          <Text bold>{`1x \"${nft.name}\" Collectible`}</Text>\n        </Flex>\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isConfirming}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Nft } from 'config/constants/types'\n\ninterface PreviewProps {\n  nft: Nft\n  isOwned?: boolean\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst StyledVideo = styled.video`\n  height: 100%;\n  width: 100%;\n`\n\nconst Preview: React.FC<PreviewProps> = ({ nft, isOwned = false }) => {\n  const { images, name, video } = nft\n  const previewImageSrc = `/images/nfts/${images.lg}`\n\n  if (video) {\n    const videoComponent = (\n      <StyledVideo autoPlay controls={false} loop muted poster={previewImageSrc}>\n        <source src={video.webm} type=\"video/webm\" />\n        <source src={video.mp4} type=\"video/mp4\" />\n      </StyledVideo>\n    )\n\n    return isOwned ? (\n      <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n        {videoComponent}\n      </a>\n    ) : (\n      videoComponent\n    )\n  }\n\n  const previewImage = <StyledImage src={previewImageSrc} alt={name} />\n\n  return (\n    <Container>\n      {isOwned ? (\n        <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Preview\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap-libs/uikit'\nimport { useProfile } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport InfoRow from '../InfoRow'\nimport TransferNftModal from '../TransferNftModal'\nimport ClaimNftModal from '../ClaimNftModal'\nimport Preview from './Preview'\n\ninterface NftCardProps {\n  nft: Nft\n  canClaim?: boolean\n  tokenIds?: number[]\n  onSuccess: () => void\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text' })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 24px;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft, onSuccess, canClaim = false, tokenIds = [] }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const TranslateString = useI18n()\n  const { profile } = useProfile()\n  const { bunnyId, name, description } = nft\n  const walletOwnsNft = tokenIds.length > 0\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const handleClick = async () => {\n    setIsOpen(!isOpen)\n  }\n\n  const [onPresentTransferModal] = useModal(<TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={onSuccess} />)\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={onSuccess} />)\n\n  return (\n    <Card isActive={walletOwnsNft || canClaim}>\n      <Preview nft={nft} isOwned={walletOwnsNft} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {walletOwnsNft && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n          {profile?.nft?.bunnyId === bunnyId && (\n            <Tag outline variant=\"success\">\n              {TranslateString(999, 'Profile Pic')}\n            </Tag>\n          )}\n        </Header>\n        {canClaim && (\n          <Button width=\"100%\" mt=\"24px\" onClick={onPresentClaimModal}>\n            {TranslateString(999, 'Claim this NFT')}\n          </Button>\n        )}\n        {walletOwnsNft && (\n          <Button width=\"100%\" variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton width=\"100%\" endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {TranslateString(658, 'Details')}\n        </DetailsButton>\n        {isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\n\nconst NftGrid = styled.div`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`\n\nexport default NftGrid\n","import React, { useCallback, useEffect, useState } from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/nfts'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBunnySpecialContract } from 'utils/contractHelpers'\nimport useGetWalletNfts from 'hooks/useGetWalletNfts'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { useToast } from 'state/hooks'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\ntype State = {\n  [key: string]: boolean\n}\n\nconst bunnySpecialContract = getBunnySpecialContract()\n\nconst NftList = () => {\n  const [claimableNfts, setClaimableNfts] = useState<State>({})\n  const { nfts: nftTokenIds, refresh } = useGetWalletNfts()\n  const { account } = useWeb3React()\n  const { toastError } = useToast()\n\n  const fetchClaimableStatuses = useCallback(\n    async (walletAddress: string) => {\n      try {\n        const claimStatuses = (await makeBatchRequest(\n          nfts.map((nft) => {\n            return bunnySpecialContract.methods.canClaimSingle(walletAddress, nft.bunnyId).call\n          }),\n        )) as boolean[]\n\n        setClaimableNfts(\n          claimStatuses.reduce((accum, claimStatus, index) => {\n            return {\n              ...accum,\n              [nfts[index].bunnyId]: claimStatus,\n            }\n          }, {}),\n        )\n      } catch (error) {\n        console.error(error)\n        toastError('Error checking NFT claimable status')\n      }\n    },\n    [setClaimableNfts, toastError],\n  )\n\n  const handleSuccess = () => {\n    refresh()\n    fetchClaimableStatuses(account)\n  }\n\n  useEffect(() => {\n    if (account) {\n      fetchClaimableStatuses(account)\n    }\n  }, [account, fetchClaimableStatuses])\n\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => {\n        const tokenIds = nftTokenIds[nft.bunnyId] ? nftTokenIds[nft.bunnyId].tokenIds : []\n\n        return (\n          <div key={nft.name}>\n            <NftCard nft={nft} canClaim={claimableNfts[nft.bunnyId]} tokenIds={tokenIds} onSuccess={handleSuccess} />\n          </div>\n        )\n      })}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport NftList from './components/NftList'\n\nconst StyledHero = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Collectibles = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <StyledHero>\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\">\n          {TranslateString(999, 'SweetSwap Collectibles')}\n        </Heading>\n      </StyledHero>\n      <NftList />\n    </Page>\n  )\n}\n\nexport default Collectibles\n","import { useWeb3React } from '@web3-react/core'\nimport { useEffect, useReducer } from 'react'\nimport { getPancakeRabbitContract } from 'utils/contractHelpers'\nimport makeBatchRequest from 'utils/makeBatchRequest'\n\nconst pancakeRabbitsContract = getPancakeRabbitContract()\n\nexport type NftMap = {\n  [key: number]: {\n    tokenUri: string\n    tokenIds: number[]\n  }\n}\n\ntype Action = { type: 'set_nfts'; data: NftMap } | { type: 'reset' } | { type: 'refresh'; timestamp: number }\n\ntype State = {\n  isLoading: boolean\n  nfts: NftMap\n  lastUpdated: number\n}\n\nconst initialState: State = {\n  isLoading: true,\n  nfts: {},\n  lastUpdated: Date.now(),\n}\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'set_nfts':\n      return {\n        ...initialState,\n        isLoading: false,\n        nfts: action.data,\n      }\n    case 'refresh':\n      return {\n        ...initialState,\n        lastUpdated: action.timestamp,\n      }\n    case 'reset':\n      return {\n        ...initialState,\n        isLoading: false,\n      }\n    default:\n      return state\n  }\n}\n\nconst useGetWalletNfts = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWeb3React()\n  const { lastUpdated } = state\n\n  useEffect(() => {\n    const fetchNfts = async () => {\n      try {\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\n\n        if (balanceOf > 0) {\n          let nfts: NftMap = {}\n\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const { tokenOfOwnerByIndex, getBunnyId, tokenURI } = pancakeRabbitsContract.methods\n              const tokenId = await tokenOfOwnerByIndex(account, index).call()\n              const [bunnyId, tokenUri] = await makeBatchRequest([getBunnyId(tokenId).call, tokenURI(tokenId).call])\n\n              return [Number(bunnyId), Number(tokenId), tokenUri]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          nfts = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [bunnyId, tokenId, tokenUri] = association\n\n            return {\n              ...accum,\n              [bunnyId]: {\n                tokenUri,\n                tokenIds: accum[bunnyId] ? [...accum[bunnyId].tokenIds, tokenId] : [tokenId],\n              },\n            }\n          }, {})\n\n          dispatch({ type: 'set_nfts', data: nfts })\n        } else {\n          // Reset it in case of wallet change\n          dispatch({ type: 'reset' })\n        }\n      } catch (error) {\n        dispatch({ type: 'reset' })\n      }\n    }\n\n    if (account) {\n      fetchNfts()\n    }\n  }, [account, lastUpdated, dispatch])\n\n  const refresh = () => dispatch({ type: 'refresh', timestamp: Date.now() })\n\n  return { ...state, refresh }\n}\n\nexport default useGetWalletNfts\n"],"sourceRoot":""}